{"version":3,"sources":["components/SidebarData.js","pages/Home.js","pages/Product.js","pages/About.js","pages/Contact.js","components/Sidenav.js","App.js","serviceWorker.js","index.js"],"names":["SidebarData","title","path","cName","Home","Component","Product","About","Contact","Sidenav","useState","sidebar","setSidebar","showSidebar","className","to","onClick","map","item","index","key","class","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAwBeA,EAtBa,CACxB,CACIC,MAAM,OACNC,KAAK,IACLC,MAAM,YAEV,CACIF,MAAM,UACNC,KAAK,WACLC,MAAM,YAEV,CACIF,MAAM,QACNC,KAAK,SACLC,MAAM,YAEV,CACIF,MAAM,UACNC,KAAK,WACLC,MAAM,a,4CCTCC,EAVf,uKAEQ,OACI,6BACI,8CAJhB,GAA0BC,aCUXC,EAVf,uKAEQ,OACI,6BACI,iDAJhB,GAA6BD,aCUdE,EAVf,uKAEQ,OACI,6BACI,+CAJhB,GAA2BF,aCUZG,EAVf,uKAEQ,OACI,6BACI,iDAJhB,GAA6BH,a,MCSd,SAASI,IAAW,IAAD,EAEFC,oBAAS,GAFP,mBAEzBC,EAFyB,KAEhBC,EAFgB,KAI1BC,EAAc,kBAAMD,GAAYD,IAEtC,OACE,oCACA,kBAAC,IAAD,KACA,yBAAKG,UAAU,UACX,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,UACrB,kBAAC,IAAD,CAAgBE,QAASH,KAG3B,yBAAKC,UAAWH,EAAU,kBAAoB,YAC5C,wBAAIG,UAAU,iBAAiBE,QAASH,GACtC,wBAAIC,UAAU,iBACZ,kBAAC,IAAD,OAEF,4BAAI,0BAAMA,UAAU,iBAAhB,SACHd,EAAYiB,KAAI,SAACC,EAAMC,GACtB,OACA,wBAAIL,UAAWI,EAAKf,MAAOiB,IAAKD,GAC9B,kBAAC,IAAD,CAAMJ,GAAIG,EAAKhB,MACb,8BAAOgB,EAAKjB,YAKlB,4BAAI,2BAAOa,UAAU,cAAjB,2BAEN,yBAAKO,MAAM,SAGjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOnB,KAAK,IAAIoB,OAAK,EAACC,UAAWnB,IACjC,kBAAC,IAAD,CAAOF,KAAK,WAAWoB,OAAK,EAACC,UAAWjB,IACxC,kBAAC,IAAD,CAAOJ,KAAK,SAASoB,OAAK,EAACC,UAAWhB,IACtC,kBAAC,IAAD,CAAOL,KAAK,WAAWoB,OAAK,EAACC,UAAWf,O,MCpC/BgB,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a81b01a4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport  const SidebarData = [\r\n    {\r\n        title:'Home',\r\n        path:'/',\r\n        cName:'nav-text'\r\n    },\r\n    {\r\n        title:'Product',\r\n        path:'/product',\r\n        cName:'nav-text'\r\n    },\r\n    {\r\n        title:'About',\r\n        path:'/about',\r\n        cName:'nav-text'\r\n    },\r\n    {\r\n        title:'Contact',\r\n        path:'/contact',\r\n        cName:'nav-text'\r\n    }\r\n]\r\nexport default SidebarData","import React, { Component } from 'react'\r\n\r\nexport class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Home Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home\r\n","import React, { Component } from 'react'\r\n\r\nexport class Product extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Product Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Product\r\n","import React, { Component } from 'react'\r\n\r\nexport class About extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>About Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About\r\n","import React, { Component } from 'react'\r\n\r\nexport class Contact extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Contact Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact\r\n","import React, { useState }  from 'react'\r\nimport * as FaIcons from 'react-icons/fa'\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport SidebarData from './SidebarData'\r\nimport { Link } from 'react-router-dom'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Home from '../pages/Home';\r\nimport Product from '../pages/Product';\r\nimport About from '../pages/About';\r\nimport Contact from '../pages/Contact';\r\nimport './Sidenav.css'\r\nexport default function Sidenav() {\r\n  \r\n  const [sidebar, setSidebar] = useState(false);\r\n  \r\n  const showSidebar = () => setSidebar(!sidebar);\r\n\r\n  return (\r\n    <>\r\n    <Router>\r\n    <div className=\"navbar\">\r\n        <Link to=\"#\" className=\"fa-bar\">\r\n          <FaIcons.FaBars onClick={showSidebar}/>\r\n        </Link>\r\n        \r\n        <nav className={sidebar ? 'nav-menu active' : 'nav-menu'}>\r\n          <ul className=\"nav-menu-items\" onClick={showSidebar}>\r\n            <li className=\"navbar-toggle\">\r\n              <AiIcons.AiOutlineClose />\r\n            </li>\r\n            <li><span className=\"nav-head-text\">Menu</span></li>\r\n            {SidebarData.map((item, index) =>{\r\n              return(\r\n              <li className={item.cName} key={index}>\r\n                <Link to={item.path}>\r\n                  <span>{item.title}</span>\r\n                </Link>\r\n              </li>\r\n                );\r\n            })}\r\n            <li><small className=\"small-text\">design by dhanusharun</small></li>\r\n          </ul>\r\n          <div class=\"vl\"></div>\r\n        </nav>\r\n    </div>\r\n    <Switch>\r\n      <Route path=\"/\" exact component={Home}></Route>\r\n      <Route path=\"/product\" exact component={Product}></Route>\r\n      <Route path=\"/about\" exact component={About}></Route>\r\n      <Route path=\"/contact\" exact component={Contact}></Route>\r\n    </Switch>\r\n    </Router>\r\n    </>\r\n  )\r\n}\r\n\r\n","import React from 'react';\nimport Sidenav from './components/Sidenav';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <>\n      <Sidenav/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}